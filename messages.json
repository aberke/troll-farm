
There's always an existing troll map that is ready to be sent out

troll-map: {trollID: troll for troll in troll-map}

{
	1: {
		"Name": "troll-name",
		"Color": "#123456", 
		"Coordinates": {
			"x": 45,
			"y": 55,
		},
		"Messages": ["nice to meet you", "my name is troll, whats your name", "hi"],
		"Points": 123,
	},
	2: .....
}

-------------------------------------------------------------

server sends updates via websockets to villages
all POST requests are returned with updates

client can also request to get all trolls

server -> client

update message:
{
	"Type": "update",
	"LocalTroll": 0,
	"ItemsMap": item-map-update (includes only items that have been updated since last message),
}
trolls message:
{
	"Type": "items",
	"LocalTroll": trollID,
	"ItemsMap": item-map,
}
ping:
{
	"Type": "ping",
	"LocalTroll": trollID,
	"ItemsMap": [] (empty map)
}
-----------------

client -> server

/move
{
	"Type": "move",
	"Data": {
		"x": 0 | 1 | -1,
		"y": 0 | 1 | -1,
	},
}
/message 
{
	"Type": "message",
	"Data": { "new message here" },
}

/trolls
{
	"Type": "trolls",
}
/ping
{
	"Type": "ping",
}
/connect
just initializes websocket connection -- client should then GET /trolls

